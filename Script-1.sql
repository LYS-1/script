SELECT * FROM tab;

SELECT * FROM REGIONS;

SELECT * FROM COUNTRIES;

SELECT * FROM DEPARTMENTS;

SELECT * FROM EMPLOYEES;

SELECT * FROM JOBS;

SELECT * FROM JOB_HISTORY;

SELECT * FROM LOCATIONS;

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID=60;

----------
-- DESC LOCAITIONS;


SELECT *
FROM LOCATIONS;

SELECT CITY, POSTAL_CODE
FROM LOCATIONS;

SELECT *
FROM EMPLOYEES;
-- 사원의 성, 이름 월급 입사일
SELECT FIRST_NAME, LAST_NAME, SALARY, (SALARY*12) AS YEAR_SALARY, (SALARY*12) - 5000 SAL, HIRE_DATE 입사일
FROM EMPLOYEES;

-- 함수 호출
SELECT SUM(SALARY)/COUNT(EMPLOYEE_ID), AVG(SALARY) 
FROM EMPLOYEES;

-- 중복 제거
SELECT DISTINCT DEPARTMENT_ID, EMPLOYEE_ID 
FROM EMPLOYEES;

SELECT STATE_PROVINCE || '의 도시명은' || CITY AS PLUS
FROM LOCATIONS;

--WHERE
SELECT FIRST_NAME, SALARY, DEPARTMENT_ID 
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

-- 사원의 정보 중 사원의 ID, 직급, 입사일, 월급
-- 월급이 15000이상인 사람
SELECT EMPLOYEE_ID, MANAGER_ID, HIRE_DATE, SALARY, DEPARTMENT_ID 
FROM EMPLOYEES 
WHERE SALARY >= 8000 AND DEPARTMENT_ID = 100;

SELECT EMPLOYEE_ID, MANAGER_ID, HIRE_DATE, SALARY, DEPARTMENT_ID 
FROM EMPLOYEES 
WHERE SALARY > AVG(SALARY);

SELECT *
FROM EMPLOYEES 
WHERE COMMISSION_PCT IS NULL;

-- 사원의 모든 정보 급여가 8000이상 15000이하
SELECT *
FROM EMPLOYEES
WHERE SALARY >= 8000 AND SALARY <= 15000;

--BETWEEN
SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 8000 AND 15000;

--사원의 모든 정보 부서가 60 OR 100
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60 OR DEPARTMENT_ID = 100;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (60, 100);

-- 사원의 모든 정보 이름이 AUSTIN
SELECT *
FROM EMPLOYEES
WHERE LAST_NAME LIKE 'Austin';

-- 사원의 모든 정보 2004년 1월 1일 이후입사자
SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE >= '2004-01-01';

SELECT *
FROM EMPLOYEES
WHERE LAST_NAME LIKE 'K%';

-- 사원의 급여 순
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES
ORDER BY SALARY DESC, LAST_NAME ASC;

-- 사원의 이름 순
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES
ORDER BY LAST_NAME;

-- 사원의 모든정보 입사 순
SELECT * 
FROM EMPLOYEES
ORDER BY HIRE_DATE ASC;

SELECT * 
FROM EMPLOYEES
ORDER BY HIRE_DATE ASC;


--1
SELECT EMPLOYEE_ID, LAST_NAME, SALARY, DEPARTMENT_ID, HIRE_DATE, MANAGER_ID 
FROM EMPLOYEES;


--2
SELECT LAST_NAME, FIRST_NAME, SALARY, (SALARY*12), SALARY + 100 AS "Increased Salary", (SALARY*12) + 100 AS "Increased Ann_Salary"
FROM EMPLOYEES;

--3
SELECT LAST_NAME, FIRST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY NOT BETWEEN 7000 AND 10000
ORDER BY SALARY ASC;
--4 
SELECT *
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%e%' OR LAST_NAME LIKE '%o%';

--5
SELECT LAST_NAME, SALARY, DEPARTMENT_ID, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC;

SELECT * FROM LOCATIONS;

SELECT * FROM LOCATIONS WHERE STREET_ADDRESS LIKE '%v%';

SELECT * FROM EMPLOYEES;

SELECT HIRE_DATE, EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MANAGER_ID, DEPARTMENT_ID FROM EMPLOYEES ORDER BY HIRE_DATE DESC

SELECT * FROM EMPLOYEES WHERE LAST_NAME LIKE '%Gietz%';
----
--100번 부서에 근무하는 사원들의 평균 급여, 그 부서에서 급여가 제일 많은사람과 제일 적은사람의 금액
SELECT SUM(SALARY)/COUNT(EMPLOYEE_ID), MAX(SALARY), MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 100; 
SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 100;
-- 부서별 평균급여, 큰금액 작은금액
SELECT DEPARTMENT_ID, SUM(SALARY)/COUNT(EMPLOYEE_ID) AS AVG, MAX(SALARY) AS MAX, MIN(SALARY) AS MIN
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) < 10000
ORDER BY 3 DESC;

--매니저 별 사원수
SELECT MANAGER_ID, COUNT(DEPARTMENT_ID)
FROM EMPLOYEES
GROUP BY MANAGER_ID
HAVING MANAGER_ID IS NOT NULL
ORDER BY 2 DESC;

--INSERT
-- INSERT INTO 테이블명(컬럼1, 컬럼2, ...) VALUES(값1, 값2, ...)
INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES(5, 'Test');

INSERT INTO REGIONS (REGION_NAME, REGION_ID) VALUES('Test2',6);

INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES(7, NULL);

INSERT INTO REGIONS (REGION_ID) VALUES(8);

--갯수 맞추지않아서 에러
--INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES(9);

--INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES(NULL, NULL);

INSERT INTO REGIONS VALUES (9, 'Test3');

INSERT INTO REGIONS VALUES (10, NULL);


ROLLBACK;
DELETE REGIONS WHERE REGION_ID = 5;

-- DELETE REGIONS WHERE REGION_ID IN (7,8,10);
DELETE REGIONS WHERE REGION_NAME IS NULL;
--DELETE REGOINS WHERE REGION_ID = 7;
--DELETE GEGIONS WHERE REGION_ID = 8;
--DELETE REGIONS WHERE REGION_ID = 9;
--DELETE REGIONS WHERE REGION_ID = 10;

DELETE REGIONS WHERE REGION_ID IN (5,9);

DELETE REGIONS WHERE REGION_NAME LIKE '%Test%';

SELECT * FROM COUNTRIES;

INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID) VALUES('AR', 'NAVI', 2);
INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID) VALUES('ZZA', 'TEST2', 2);
--INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID) VALUES('T3', 'Test3', 10);
--DELETE COUNTRIES WHERE COUNTRY_ID = 'T3';

SELECT * FROM DEPARTMENTS;
SELECT * FROM SEQ;

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME,  MANAGER_ID, LOCATION_ID)
VALUES(DEPARTMENTS_SEQ.NEXTVAL, 'Test', NULL, 1700);

SELECT * FROM LOCATIONS;

SELECT * FROM USER_TRIGGERS;

SELECT * FROM EMPLOYEES;
DELETE LOCATIONS WHERE LOCATION_ID = 3700;

DROP TRIGGER SECURE_EMPLOYEES;

SELECT * FROM USER_TRIGGERS;

CREATE OR REPLACE TRIGGER secure_employees  
  BEFORE INSERT OR UPDATE OR DELETE ON employees  
BEGIN  
  secure_dml;  

SELECT * FROM DEPARTMENTS ;
UPDATE DEPARTMENTS SET MANAGER_ID = 200 WHERE DEPARTMENT_ID = 120;

SELECT * FROM LOCATIONS;
SELECT * FROM LOCATIONS WHERE STREET_ADDRESS LIKE '%test%';

INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) 
VALUES (EMPLOYEES_SEQ.NEXTVAL, 'test1', 'test1', 'test99@gamil.com', '010-2222-2222', '2022-11-11', 'IT_PROG', 3400, 0.1, 120, 80);

ROLLBACK;
DELETE EMPLOYEES WHERE EMPLOYEE_ID = 221;
COMMIT;

SELECT SUM(SALARY), AVG(SALARY) FROM EMPLOYEES;
SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES;
SELECT SUM(SALARY), AVG(SALARY) , COUNT(COMMISSION_PCT) FROM EMPLOYEES;
SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(COMMISSION_PCT) FROM EMPLOYEES;
SELECT MAX(SALARY), MIN(SALARY) FROM EMPLOYEES;
SELECT MAX(HIRE_DATE), MIN(HIRE_DATE) FROM EMPLOYEES;


SELECT MAX(LAST_NAME), MIN(LAST_NAME)FROM EMPLOYEES;
-- SELECT AVG(HIRE_DATE) FROM EMPLOYEES;

-- 2. 단일함수
SELECT *FROM DEPARTMENTS;
SELECT DEPARTMENT_NAME, NVL(MANAGER_ID, 200)
FROM DEPARTMENTS;

SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(COMMISSION_PCT) FROM EMPLOYEES;

SELECT SUM(COMMISSION_PCT)/COUNT(EMPLOYEE_ID), AVG(NVL(COMMISSION_PCT, 0)) 
FROM EMPLOYEES;

SELECT DEPARTMENT_NAME, NVL2(MANAGER_ID, 100, 200)
FROM DEPARTMENTS;

-- 숫자함수
SELECT ABS(-2.2) AS ABS FROM DUAL;
SELECT FLOOR(3.723) FROM DUAL;
SELECT ROUND(3.723, 1) FROM DUAL;

-- 문자함수
SELECT DEPARTMENT_ID, UPPER(DEPARTMENT_NAME)
FROM DEPARTMENTS;

SELECT RPAD('abc', 10, '*') FROM DUAL;
SELECT LPAD('ABC', 10, '%') FROM DUAL;
--'MYDATA'
-- M*****
SELECT RPAD(SUBSTR('MYDATA', 0, 1), LENGTH('MYDATA'), '*') AS TEST FROM DUAL;

SELECT * FROM EMPLOYEES;
SELECT EMPLOYEE_ID, FIRST_NAME, RPAD(SUBSTR(FIRST_NAME, 0 , 1), LENGTH(FIRST_NAME), '*') AS FS
FROM EMPLOYEES;

--날짜 함수
SELECT  SYSDATE, SYSTIMESTAMP, CURRENT_DATE, CURRENT_TIMESTAMP FROM DUAL;

SELECT SYSDATE, SYSDATE+3, SYSDATE-2 FROM DUAL;

SELECT ADD_MONTHS(SYSDATE , -1) FROM DUAL;

SELECT EMPLOYEE_ID, FLOOR(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) AS HIREMONTH 
FROM EMPLOYEES;

SELECT NEXT_DAY(SYSDATE, '수') FROM DUAL;

SELECT NEXT_DAY(SYSDATE, 4) FROM DUAL;

SELECT LAST_DAY(SYSDATE) FROM DUAL;
-- TO CHAR
SELECT TO_CHAR(SYSDATE) FROM DUAL;

SELECT TO_CHAR(SYSDATE , 'YYYY MM DD DAY HH24 MI SS') FROM DUAL;

SELECT TO_CHAR(1234, '9,999,999') FROM DUAL; 

-- TO_NUMBER
SELECT TO_NUMBER('123')*2 FROM DUAL;
SELECT TO_NUMBER('1,234', '9,999')*2 FROM DUAL;
SELECT TO_NUMBER('1.23')*2 FROM DUAL;

-- TO_DATE
SELECT TO_DATE('2022.3.12') FROM DUAL;

SELECT * FROM EMPLOYEES ORDER BY EMPLOYEE_ID ASC;
SELECT * FROM DEPARTMENTS;
------------------
-- LAST NAME = KING 인 사람이 근무하는 부서명

SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'King';

SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'King');

SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'King');

SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID IN (SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'King'));

SELECT REGION_ID FROM COUNTRIES WHERE COUNTRY_ID IN (SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID IN (SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'King')));

SELECT REGION_ID , REGION_NAME 
FROM REGIONS
WHERE REGION_ID IN (SELECT REGION_ID 
					FROM COUNTRIES 
					WHERE COUNTRY_ID IN (SELECT COUNTRY_ID 
										FROM LOCATIONS 
										WHERE LOCATION_ID IN (SELECT LOCATION_ID 
																FROM DEPARTMENTS 
																WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID 
																						FROM EMPLOYEES 
																						WHERE LAST_NAME = 'King'))));

--시에틀에 근무하는 사원들의 정보
SELECT LOCATION_ID 
FROM LOCATIONS
WHERE CITY = 'Seattle';

SELECT * FROM EMPLOYEES ;

SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE LOCATION_ID = 1700;

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN(10, 30, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270);
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE LOCATION_ID = 1700);

SELECT *
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);

SELECT FIRST_NAME
FROM EMPLOYEES
WHERE EMPLOYEE_ID IN (SELECT MANAGER_ID
FROM EMPLOYEES
WHERE FIRST_NAME = 'Lex');

SELECT MANAGER_ID
FROM EMPLOYEES
WHERE FIRST_NAME = 'Lex';
-- 사원들중 급여를 제일 많이받는 사원과 같은 부서에 근무하는 사원들의 평균급여

SELECT AVG(SALARY)
FROM EMPLOYEES 
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEES));

-- 신입 사원의 이름 오래된 사람의 이름

SELECT LAST_NAME 
FROM EMPLOYEES 
WHERE HIRE_DATE IN(SELECT MAX(HIRE_DATE) FROM EMPLOYEES);

SELECT
(SELECT LAST_NAME 
FROM EMPLOYEES 
WHERE HIRE_DATE IN(SELECT MIN(HIRE_DATE) FROM EMPLOYEES)),
(SELECT LAST_NAME 
FROM EMPLOYEES 
WHERE HIRE_DATE IN(SELECT MIN(HIRE_DATE) FROM EMPLOYEES))
FROM DUAL;


SELECT MIN(HIRE_DATE) FROM EMPLOYEES;

SELECT * FROM REGIONS;

INSERT INTO REGIONS(REGION_ID, REGION_NAME)
VALUES((SELECT MAX(REGION_ID)+1 FROM REGIONS), 'MARS');

SELECT B.SALARY 
FROM (SELECT A.SALARY*2, A.SALARY FROM(SELECT LAST_NAME, SALARY, DEPARTMENT_ID FROM EMPLOYEES) A) B;

--1.
SELECT * 
FROM LOCATIONS 
WHERE LOCATION_ID  = (
SELECT LOCATION_ID 
FROM DEPARTMENTS 
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID 
FROM EMPLOYEES 
WHERE EMPLOYEE_ID = 190));

--2.
SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS 
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID 
FROM EMPLOYEES 
WHERE LAST_NAME = 'Khoo');

--3.
SELECT COUNTRY_NAME 
FROM COUNTRIES 
WHERE COUNTRY_ID =(
SELECT COUNTRY_ID 
FROM LOCATIONS
WHERE LOCATION_ID = (
SELECT LOCATION_ID  
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID  
FROM EMPLOYEES
WHERE EMPLOYEE_ID = (
SELECT MANAGER_ID
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 199))));

--4.
SELECT CITY
FROM LOCATIONS
WHERE LOCATION_ID = (
SELECT LOCATION_ID 
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = (
SELECT DEPARTMENT_ID 
FROM EMPLOYEES 
WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES)));

--5.
SELECT *
FROM EMPLOYEES 
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'IT');

--6.
SELECT *
FROM EMPLOYEES
WHERE SALARY > (SELECT SALARY FROM EMPLOYEES WHERE LAST_NAME = 'Greenberg');

--7.
SELECT * FROM EMPLOYEES WHERE (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, MIN(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);

--8.
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN 
(SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE LOCATION_ID IN 
(SELECT LOCATION_ID FROM LOCATIONS WHERE CITY LIKE 'S%'));

--9.
SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM EMPLOYEES 
WHERE (SELECT AVG(SALARY) FROM (SELECT AVG(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID)) > 
(SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = (SELECT MANAGER_ID FROM EMPLOYEES WHERE LAST_NAME = 'Austin'))));

COMMIT;


SELECT  FIRSTH_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;

SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 100); 

SELECT E.FIRST_NAME, D.DEPARTMENT_NAME, E.DEPARTMENT_ID 
FROM EMPLOYEES E 
	INNER JOIN DEPARTMENTS D 
	ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
WHERE E.EMPLOYEE_ID = 100;


-- 부서 번호가 30번인 부서에 근무하는 사원의 정보 이름 월급 부서명 부서아이디 도시명 나라명 대륙명

SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY, D.DEPARTMENT_ID, L.CITY, C.COUNTRY_NAME , R.REGION_NAME
FROM EMPLOYEES E
	INNER JOIN DEPARTMENTS D 
	ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
	INNER JOIN LOCATIONS L 
	ON (D.LOCATION_ID = L.LOCATION_ID)
	INNER JOIN COUNTRIES C 
	ON (L.COUNTRY_ID = C.COUNTRY_ID)
	INNER JOIN REGIONS R 
	ON (C.REGION_ID  = R.REGION_ID)
WHERE E.DEPARTMENT_ID = 30;

-- USING : 조인 조건중 컬럼명이 같을 경우 사용
-- USING에 사용한 컬럼명은 사용시 테이블 명의 식별자를 사용하지 않는다.

SELECT FIRST_NAME, DEPARTMENT_NAME, DEPARTMENT_ID
FROM EMPLOYEES E
	NATURAL JOIN 
	DEPARTMENTS D
WHERE EMPLOYEE_ID = 100;


---------------------------------
-- 30번 부서에 근무하는 사원중 가장 월급이 많은 사원의 월급보다 많이 받는 사원들의 이름, 월급, 부서명, 도시명을 출력
SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 30;

SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY, D.DEPARTMENT_NAME, L.CITY 
FROM EMPLOYEES E
	INNER JOIN DEPARTMENTS D
	USING(DEPARTMENT_ID)
	INNER JOIN LOCATIONS L 
	USING(LOCATION_ID)
WHERE E.SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 30);

-- 사원들의 이름, 월급, 입사일, 매니저의 이름, 매니저의 월급, 매니저의 입사일
SELECT E.FIRST_NAME, E.SALARY, E.HIRE_DATE, E2.FIRST_NAME AS M_NAME, E2.SALARY AS M_SALARY, E2.HIRE_DATE AS M_HIRE
FROM EMPLOYEES E
	INNER JOIN EMPLOYEES E2
	ON (E.MANAGER_ID = E2.EMPLOYEE_ID);

--부서명, 부서관리자의 이름, 월급, 입사일
SELECT D.DEPARTMENT_NAME, D.MANAGER_ID, E.SALARY, E.SALARY
FROM DEPARTMENTS D
	LEFT OUTER JOIN EMPLOYEES E 
	ON(D.MANAGER_ID = E.EMPLOYEE_ID);

SELECT * FROM DEPARTMENTS;

----
SELECT * FROM JOBS;

-- 최소 급여가 8200, 최대급여 16000에 속하는 JOB-TITLE과 사원의 ID, 급여
SELECT J.JOB_TITLE, E.EMPLOYEE_ID, E.SALARY
FROM EMPLOYEES E
	INNER JOIN JOBS J
	ON E.SALARY BETWEEN 8200 AND 16000;

	
SELECT *
FROM EMPLOYEES E
	INNER JOIN JOBS J
	ON(E.JOB_ID = J.JOB_ID)
WHERE E.SALARY >= 8200 AND E.SALARY <= 16000;



SELECT *
FROM EMPLOYEES;

--JOIN
-----------------------------------

------------DDL
-- TABLE 생성
CREATE TABLE TEST(
	NAME VARCHAR2(100),
	NUM NUMBER,
	KOR NUMBER(3),
	AVG NUMBER(5, 2)
);

SELECT * FROM TEST;

INSERT INTO TEST (NAME, NUM, KOR, AVG) VALUES ('CHECK', 1, 80, 80.72);
